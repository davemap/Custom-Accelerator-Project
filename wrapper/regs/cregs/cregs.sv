// VGEN START: Autogenerated by /Users/davidmapstone/Documents/SoCLabs/RTL/accelerator-system-top/CHIPKIT/tools/vgen/bin/vgen.py on 10:59:11 24/03/2023

//-----------------------------------------------------------------------------
// SoC Labs APB register Template
// A joint work commissioned on behalf of SoC Labs, under Arm Academic Access license.
//
// Contributors
//
// David Mapstone (d.a.mapstone@soton.ac.uk)
//
// Copyright  2023, SoC Labs (www.soclabs.org)
//-----------------------------------------------------------------------------
// VGEN: HEADER 
// Register file contents:
//{'name': 'accelerator_en', 'idx': '0', 'nbits': '32', 'start': '0', 'access': 'rw', 'test': '0', 'rval': '0x00000000', 'desc': 'Accelerator Enable Register'}
//{'name': 'accelerator_channel_en', 'idx': '1', 'nbits': '32', 'start': '0', 'access': 'rw', 'test': '0', 'rval': '0x00000000', 'desc': 'Accelerator Channel Enable Register'}


// VGEN: MODULE NAME
module cregs (

// clocks and resets
  input logic     clk,           
  input logic     rstn,

// APB inteface
  input logic psel,
	input logic [ADDRWIDTH:0] paddr,
	input logic penable,
	input logic pwrite,
	input logic [31:0] pwdata,

	output logic [31:0] prdata,
	output logic pready,
	output logic pslverr,

// VGEN: INPUTS TO REGS


// VGEN: OUTPUTS FROM REGS
	output logic [31:0] accelerator_en	 /* idx #0: Accelerator Enable Register */,
	output logic [31:0] accelerator_channel_en	 /* idx #1: Accelerator Channel Enable Register */

);

//------------------------------------------------------------------------------
// APB Interface
//------------------------------------------------------------------------------

logic [ADDRWIDTH-1:0]    addr;
logic                    read_en;
logic                    write_en;
logic [31:0]             wdata;
logic [31:0]             rdata;

// APB interface
assign   pready  = 1'b1; //always ready. Can be customized to support waitstate if required.
assign   pslverr = 1'b0; //alwyas OKAY. Can be customized to support error response if required.


// register read and write signal
assign  addr = paddr;
assign  read_en  = psel & (~pwrite); // assert for whole apb read transfer
assign  write_en = psel & (~penable) & pwrite; // assert for 1st cycle of write transfer
        // It is also possible to change the design to perform the write in the 2nd
        // APB cycle.   E.g.
        //   assign write_en = psel & penable & pwrite;
        // However, if the design generate waitstate, this expression will result
        // in write_en being asserted for multiple cycles.
assign  wdata       = pwdata;
assign  prdata      = rdata;

//------------------------------------------------------------------------------
// Regsiter write
//------------------------------------------------------------------------------

// VGEN: REG WRITE
// idx #0
logic [31:0] accelerator_en_reg;
always@(posedge clk or negedge rstn) begin
  if(~rstn) begin
    accelerator_en_reg[31:0] <= '0;
  end else begin
    if(write_en & (addr[9:2]==8'h0)) accelerator_en_reg[31:0] <= wdata[31:0];
  end
end
assign accelerator_en[31:0] = accelerator_en_reg[31:0];

// idx #1
logic [31:0] accelerator_channel_en_reg;
always@(posedge clk or negedge rstn) begin
  if(~rstn) begin
    accelerator_channel_en_reg[31:0] <= '0;
  end else begin
    if(write_en & (addr[9:2]==8'h1)) accelerator_channel_en_reg[31:0] <= wdata[31:0];
  end
end
assign accelerator_channel_en[31:0] = accelerator_channel_en_reg[31:0];



//------------------------------------------------------------------------------
// Regsiter read
//------------------------------------------------------------------------------


logic [31:0] rdata_o;

always @*
begin
  if (read_en)
  begin
    rdata_o[31:0] = 32'h00000000;

    // VGEN: REG READ
    if(addr[9:2]==8'h0)     if(addr[9:2]==8'h0) rdata_o[31:0] = accelerator_en[31:0];	 // idx #0
    if(addr[9:2]==8'h1)     if(addr[9:2]==8'h1) rdata_o[31:0] = accelerator_channel_en[31:0];	 // idx #1

  end
  else 
  begin
    rdata_o[31:0] = {32'h00000000};
  end	
end

assign rdata[31:0] = rdata_o[31:0];


//------------------------------------------------------------------------------
// 
//------------------------------------------------------------------------------




endmodule
// VGEN END: Autogenerated by /Users/davidmapstone/Documents/SoCLabs/RTL/accelerator-system-top/CHIPKIT/tools/vgen/bin/vgen.py on 10:59:11 24/03/2023

